package com.mycompany.moutasem219140;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Moutasem
 */
public class FirstNodeGUI extends javax.swing.JFrame {
     public static String RecieverNodeName;
      
    private static DatagramSocket privateMessageSocket;
    public static String nodeName;
   
    public static final int priv_msg_port = 3001; 
    
    String serverHostname = "localhost";
            int serverPort = 2002;
    Socket socket;
    DataOutputStream output;
    DataInputStream input;
    /**
     * Creates new form Node
     */
    public FirstNodeGUI() {
        try {
            this.socket = new Socket(serverHostname, serverPort);
            this.input = new DataInputStream(socket.getInputStream());
            this.output = new DataOutputStream(socket.getOutputStream());
            initComponents();
        } catch (IOException ex) {
            Logger.getLogger(FirstNodeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
public void appendTextArea(String eq)
    {
        jTextArea1.append(eq+"\n");
    } 

    private static String encryptMessage(String message) {
    StringBuilder encryptedMessage = new StringBuilder();

    for (int i = 0; i < message.length(); i++) {
        char c = message.charAt(i);
        
        c++;
        encryptedMessage.append(c);
    }

    return encryptedMessage.toString();
}

private static String decryptMessage(String encryptedMessage) {
    StringBuilder decryptedMessage = new StringBuilder();

    for (int i = 0; i < encryptedMessage.length(); i++) {
        char c = encryptedMessage.charAt(i);
        
        c--;
        decryptedMessage.append(c);
    }

    return decryptedMessage.toString();
}
private  void receiveMessages(DataInputStream input) {
        try {
            while (true) {
                String message = input.readUTF();
                appendTextArea(message);
                
            }
        } catch (EOFException e) {
            appendTextArea("Connection closed. Exiting the node.\n");

            System.exit(0);
        } catch (IOException e) {
            appendTextArea("Error receiving messages: " + e.getMessage());
        }
    }

    private  void handlePrivateMessages() {
        byte[] buffer = new byte[1024];
        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);

        try {
            while (true) {
                privateMessageSocket.receive(packet);
                String encryptedMessage = new String(packet.getData(), 0, packet.getLength());

                String decryptedMessage = decryptMessage(encryptedMessage);
                appendTextArea("Private message received: " + decryptedMessage);

            }
        } catch (IOException e) {
            appendTextArea("Error handling private messages: " + e.getMessage());
        }
    }

    private  void sendPrivateMessage(String message) {
        try {
            String encryptedMessage = encryptMessage(message);
            byte[] buffer = encryptedMessage.getBytes();
            InetAddress otherNodeAddress = InetAddress.getByName("localhost"); 
              int otherNodePort;
        
        switch (RecieverNodeName) {
            case "node2":
                otherNodePort = 3002;
                break;
            case "node3":
                otherNodePort = 3003;
                break;
            case "node4":
                otherNodePort = 3004;
                break;
             default:
                otherNodePort = 3001;
                break;
        }
            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, otherNodeAddress, otherNodePort);
            privateMessageSocket.send(packet);
        } catch (IOException e) {
            appendTextArea("error sending private message: " + e.getMessage());
        }
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setForeground(new java.awt.Color(255, 0, 51));
        jButton2.setText("Leave");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setForeground(new java.awt.Color(51, 255, 51));
        jButton3.setText("Join");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Send");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        jLabel1.setText("Node 1");

        jLabel2.setText("Send Private Msg");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2)
                                    .addComponent(jButton3)
                                    .addComponent(jButton4)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jButton1)))
                .addContainerGap(52, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jButton2)
                        .addGap(47, 47, 47)
                        .addComponent(jButton4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "write this to send orivate msg : Private.<nodename>,<message");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
        String message =jTextField1.getText(); 
        if (message.equals("leave")) {
                    output.writeUTF(message);
                
                } else if (message.startsWith("private.")) {
                    char identifier = '.';
                    char identifier2= ',';
                    int index = message.indexOf(identifier);
                    int index2 = message.indexOf(identifier2);
                    RecieverNodeName =(message.substring(index +1,index2 ));
                    
                    sendPrivateMessage(message.substring(14)); 
                    
                    
                    

                } else {
                    output.writeUTF(message);
                }
            }
         catch (IOException e) {
             appendTextArea("error in the node: " +e.getMessage());
            System.out.println("error in the node: " + e.getMessage());
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
        
         
            


            nodeName = "node1";
            output.writeUTF(nodeName);
            

            Thread receiveThread = new Thread(() -> receiveMessages(input));
            receiveThread.start();

            // Start the private message server
            privateMessageSocket = new DatagramSocket(priv_msg_port);
            Thread privateMessageThread = new Thread(() -> handlePrivateMessages());
            privateMessageThread.start();
            } catch (IOException e) {
             jTextArea1.setText("Error in the node: " + e.getMessage());
}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FourthNodeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FourthNodeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FourthNodeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FourthNodeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
      

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FirstNodeGUI().setVisible(true);
            }
            });     
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}


    
    
    
    

